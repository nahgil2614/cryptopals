import random
import time

from AES_CBC import Ciphers
from AES_CBC import InvCiphers
from AES_CBC import KeyExpansion

def str2bytes( string ):
    return bytes([ord(ltr) for ltr in string])

#const
IV = ''.join([chr(random.getrandbits(8)) for _ in range(16)])

randKey = str2bytes( IV )
w = KeyExpansion( randKey )

def XOR( block1, block2 ): #16 bytes array
    return bytes([x^y for x,y in zip(block1, block2)])

def send( string ):
    plain = str2bytes(InvCiphers( string, w, IV ))
    compliant = True
    for ltr in plain:
        if ltr not in range(128):
            print('Sorry! Your plaintext is not ASCII-compliant, please consider another ciphertext. Thank you.')
            print( plain )
            compliant = False
            break
    if compliant:
        print('Thank you for confirming. Your message is being sent...')
        plain = b'Successful token'
    return plain

def main():
    start_time = time.time()
    
    P_1 = b'YELLOW SUBMARINE'
    P_2 = b'PURPLE SUBMARINE'
    P_3 = b'GLOOMY SUBMARINE'
    plain = P_1 + P_2 + P_3 #at least 3 blocks long
    cipher = str2bytes(Ciphers( plain, w, IV ))
    modified_cipher = cipher[:16] + bytes(16) + cipher[:16]
    plain_exploit = send(modified_cipher)
    key = XOR( plain_exploit[:16], plain_exploit[-16:] )
    print('\n')
    if key == randKey:
        print('Key recovered successfully!')
        print(key)
    else:
        print('Sorry, invalid key is found.')

    time_elapsed = time.time() - start_time
    print('Time elapsed: ' + str(time_elapsed))

if __name__ == '__main__':
    main()
